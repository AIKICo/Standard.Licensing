﻿//
// Copyright © 2012 - 2013 AG-Software     http://www.ag-software.de
//
// Author:
//  Alexander Gnauck        <gnauck(at)ag-software.de>
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using System;
using System.Text;
using System.Xml.Linq;

namespace Portable.Licensing.Security.Cryptography.ElGamal
{
    internal abstract class ElGamal : AsymmetricAlgorithm
    {

        public abstract ElGamalParameters ExportParameters(bool p_include_private_params);
        public abstract void ImportParameters(ElGamalParameters p_parameters);

        public abstract byte[] EncryptData(byte[] p_data);
        public abstract byte[] DecryptData(byte[] p_data);
        public abstract byte[] Sign(byte[] p_hashcode);
        public abstract bool VerifySignature(byte[] p_hashcode, byte[] p_signature);


        public override string ToXmlString(bool p_include_private)
        {
            ElGamalParameters x_params = ExportParameters(p_include_private);
            // create a new string builder
            StringBuilder x_sb = new StringBuilder();
            // add the header
            x_sb.Append("<ElGamalKeyValue>");
            // add the public elements from the parameters
            x_sb.Append("<P>" + Convert.ToBase64String(x_params.P) + "</P>");
            x_sb.Append("<G>" + Convert.ToBase64String(x_params.G) + "</G>");
            x_sb.Append("<Y>" + Convert.ToBase64String(x_params.Y) + "</Y>");
            if (p_include_private)
            {
                // we need to include X, which is the part of private key
                x_sb.Append("<X>" + Convert.ToBase64String(x_params.X) + "</X>");
            }
            // add the final element
            x_sb.Append("</ElGamalKeyValue>");
            return x_sb.ToString();
        }

        public override void FromXmlString(String p_string)
        {
            // create the params that we will use as the result
            ElGamalParameters x_params = new ElGamalParameters();

            XDocument xdoc = XDocument.Parse(p_string);
            XElement root = xdoc.Root;

            if (root != null)
            {
                // set the value for P
                XElement xelP = root.Element("P");
                if (xelP != null)
                    x_params.P = Convert.FromBase64String(xelP.Value);
            
                // set the value for G
                XElement xelG = root.Element("G");
                if (xelG != null)
                    x_params.G = Convert.FromBase64String(xelG.Value);
    
                // set the value for Y
                XElement xelY = root.Element("Y");
                if (xelY != null)
                    x_params.Y = Convert.FromBase64String(xelY.Value);
                            
                // set the value for X (this would not be found in a string
                // that was generated by excluding the private elements.
                XElement xelX = root.Element("X");
                if (xelX != null)
                    x_params.X = Convert.FromBase64String(xelX.Value);
            }
           
            // Import the result
            ImportParameters(x_params);
        }
    }
}